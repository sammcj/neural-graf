// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	service "github.com/sammcj/mcp-graph/internal/service"
)

// MockKnowledgeManager is a mock of KnowledgeManager interface.
type MockKnowledgeManager struct {
	ctrl     *gomock.Controller
	recorder *MockKnowledgeManagerMockRecorder
}

// MockKnowledgeManagerMockRecorder is the mock recorder for MockKnowledgeManager.
type MockKnowledgeManagerMockRecorder struct {
	mock *MockKnowledgeManager
}

// NewMockKnowledgeManager creates a new mock instance.
func NewMockKnowledgeManager(ctrl *gomock.Controller) *MockKnowledgeManager {
	mock := &MockKnowledgeManager{ctrl: ctrl}
	mock.recorder = &MockKnowledgeManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKnowledgeManager) EXPECT() *MockKnowledgeManagerMockRecorder {
	return m.recorder
}

// CreateConcept mocks base method.
func (m *MockKnowledgeManager) CreateConcept(ctx context.Context, name string, properties map[string]interface{}) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConcept", ctx, name, properties)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConcept indicates an expected call of CreateConcept.
func (mr *MockKnowledgeManagerMockRecorder) CreateConcept(ctx, name, properties interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConcept", reflect.TypeOf((*MockKnowledgeManager)(nil).CreateConcept), ctx, name, properties)
}

// CreateDocument mocks base method.
func (m *MockKnowledgeManager) CreateDocument(ctx context.Context, title, content string, metadata map[string]interface{}) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDocument", ctx, title, content, metadata)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDocument indicates an expected call of CreateDocument.
func (mr *MockKnowledgeManagerMockRecorder) CreateDocument(ctx, title, content, metadata interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDocument", reflect.TypeOf((*MockKnowledgeManager)(nil).CreateDocument), ctx, title, content, metadata)
}

// DeleteDocument mocks base method.
func (m *MockKnowledgeManager) DeleteDocument(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDocument", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDocument indicates an expected call of DeleteDocument.
func (mr *MockKnowledgeManagerMockRecorder) DeleteDocument(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDocument", reflect.TypeOf((*MockKnowledgeManager)(nil).DeleteDocument), ctx, id)
}

// GetConcept mocks base method.
func (m *MockKnowledgeManager) GetConcept(ctx context.Context, id string) (*service.Concept, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConcept", ctx, id)
	ret0, _ := ret[0].(*service.Concept)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConcept indicates an expected call of GetConcept.
func (mr *MockKnowledgeManagerMockRecorder) GetConcept(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConcept", reflect.TypeOf((*MockKnowledgeManager)(nil).GetConcept), ctx, id)
}

// GetDocument mocks base method.
func (m *MockKnowledgeManager) GetDocument(ctx context.Context, id string) (*service.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDocument", ctx, id)
	ret0, _ := ret[0].(*service.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDocument indicates an expected call of GetDocument.
func (mr *MockKnowledgeManagerMockRecorder) GetDocument(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocument", reflect.TypeOf((*MockKnowledgeManager)(nil).GetDocument), ctx, id)
}

// InitialiseSchema mocks base method.
func (m *MockKnowledgeManager) InitialiseSchema(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitialiseSchema", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitialiseSchema indicates an expected call of InitialiseSchema.
func (mr *MockKnowledgeManagerMockRecorder) InitialiseSchema(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitialiseSchema", reflect.TypeOf((*MockKnowledgeManager)(nil).InitialiseSchema), ctx)
}

// LinkConcepts mocks base method.
func (m *MockKnowledgeManager) LinkConcepts(ctx context.Context, fromID, toID, relationshipType string, properties map[string]interface{}) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LinkConcepts", ctx, fromID, toID, relationshipType, properties)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LinkConcepts indicates an expected call of LinkConcepts.
func (mr *MockKnowledgeManagerMockRecorder) LinkConcepts(ctx, fromID, toID, relationshipType, properties interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkConcepts", reflect.TypeOf((*MockKnowledgeManager)(nil).LinkConcepts), ctx, fromID, toID, relationshipType, properties)
}

// SearchConcepts mocks base method.
func (m *MockKnowledgeManager) SearchConcepts(ctx context.Context, query string) ([]*service.Concept, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchConcepts", ctx, query)
	ret0, _ := ret[0].([]*service.Concept)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchConcepts indicates an expected call of SearchConcepts.
func (mr *MockKnowledgeManagerMockRecorder) SearchConcepts(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchConcepts", reflect.TypeOf((*MockKnowledgeManager)(nil).SearchConcepts), ctx, query)
}

// SearchDocuments mocks base method.
func (m *MockKnowledgeManager) SearchDocuments(ctx context.Context, query string) ([]*service.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchDocuments", ctx, query)
	ret0, _ := ret[0].([]*service.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchDocuments indicates an expected call of SearchDocuments.
func (mr *MockKnowledgeManagerMockRecorder) SearchDocuments(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchDocuments", reflect.TypeOf((*MockKnowledgeManager)(nil).SearchDocuments), ctx, query)
}

// UpdateDocument mocks base method.
func (m *MockKnowledgeManager) UpdateDocument(ctx context.Context, id, title, content string, metadata map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDocument", ctx, id, title, content, metadata)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDocument indicates an expected call of UpdateDocument.
func (mr *MockKnowledgeManagerMockRecorder) UpdateDocument(ctx, id, title, content, metadata interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDocument", reflect.TypeOf((*MockKnowledgeManager)(nil).UpdateDocument), ctx, id, title, content, metadata)
}
