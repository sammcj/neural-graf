// Code generated by MockGen. DO NOT EDIT.
// Source: internal/graph/graph.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	graph "github.com/sammcj/mcp-graph/internal/graph"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateEdge mocks base method.
func (m *MockStore) CreateEdge(ctx context.Context, fromID, toID, relationshipType string, properties map[string]interface{}) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEdge", ctx, fromID, toID, relationshipType, properties)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEdge indicates an expected call of CreateEdge.
func (mr *MockStoreMockRecorder) CreateEdge(ctx, fromID, toID, relationshipType, properties interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEdge", reflect.TypeOf((*MockStore)(nil).CreateEdge), ctx, fromID, toID, relationshipType, properties)
}

// CreateNode mocks base method.
func (m *MockStore) CreateNode(ctx context.Context, nodeType string, properties map[string]interface{}) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNode", ctx, nodeType, properties)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNode indicates an expected call of CreateNode.
func (mr *MockStoreMockRecorder) CreateNode(ctx, nodeType, properties interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNode", reflect.TypeOf((*MockStore)(nil).CreateNode), ctx, nodeType, properties)
}

// DeleteEdge mocks base method.
func (m *MockStore) DeleteEdge(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEdge", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEdge indicates an expected call of DeleteEdge.
func (mr *MockStoreMockRecorder) DeleteEdge(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEdge", reflect.TypeOf((*MockStore)(nil).DeleteEdge), ctx, id)
}

// DeleteNode mocks base method.
func (m *MockStore) DeleteNode(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNode", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNode indicates an expected call of DeleteNode.
func (mr *MockStoreMockRecorder) DeleteNode(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNode", reflect.TypeOf((*MockStore)(nil).DeleteNode), ctx, id)
}

// FindDependencies mocks base method.
func (m *MockStore) FindDependencies(ctx context.Context, labels []string, identifyingProperties map[string]interface{}, relationshipTypes []string, maxDepth int) (graph.DependencyResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindDependencies", ctx, labels, identifyingProperties, relationshipTypes, maxDepth)
	ret0, _ := ret[0].(graph.DependencyResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindDependencies indicates an expected call of FindDependencies.
func (mr *MockStoreMockRecorder) FindDependencies(ctx, labels, identifyingProperties, relationshipTypes, maxDepth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDependencies", reflect.TypeOf((*MockStore)(nil).FindDependencies), ctx, labels, identifyingProperties, relationshipTypes, maxDepth)
}

// FindDependents mocks base method.
func (m *MockStore) FindDependents(ctx context.Context, labels []string, identifyingProperties map[string]interface{}, relationshipTypes []string, maxDepth int) (graph.DependencyResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindDependents", ctx, labels, identifyingProperties, relationshipTypes, maxDepth)
	ret0, _ := ret[0].(graph.DependencyResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindDependents indicates an expected call of FindDependents.
func (mr *MockStoreMockRecorder) FindDependents(ctx, labels, identifyingProperties, relationshipTypes, maxDepth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDependents", reflect.TypeOf((*MockStore)(nil).FindDependents), ctx, labels, identifyingProperties, relationshipTypes, maxDepth)
}

// FindNeighbors mocks base method.
func (m *MockStore) FindNeighbors(ctx context.Context, labels []string, identifyingProperties map[string]interface{}, maxDepth int) (graph.NeighborsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindNeighbors", ctx, labels, identifyingProperties, maxDepth)
	ret0, _ := ret[0].(graph.NeighborsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindNeighbors indicates an expected call of FindNeighbors.
func (mr *MockStoreMockRecorder) FindNeighbors(ctx, labels, identifyingProperties, maxDepth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindNeighbors", reflect.TypeOf((*MockStore)(nil).FindNeighbors), ctx, labels, identifyingProperties, maxDepth)
}

// FindOrCreateEntity mocks base method.
func (m *MockStore) FindOrCreateEntity(ctx context.Context, input graph.EntityInput) (graph.EntityDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrCreateEntity", ctx, input)
	ret0, _ := ret[0].(graph.EntityDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrCreateEntity indicates an expected call of FindOrCreateEntity.
func (mr *MockStoreMockRecorder) FindOrCreateEntity(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrCreateEntity", reflect.TypeOf((*MockStore)(nil).FindOrCreateEntity), ctx, input)
}

// FindOrCreateRelationship mocks base method.
func (m *MockStore) FindOrCreateRelationship(ctx context.Context, input graph.RelationshipInput) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrCreateRelationship", ctx, input)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrCreateRelationship indicates an expected call of FindOrCreateRelationship.
func (mr *MockStoreMockRecorder) FindOrCreateRelationship(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrCreateRelationship", reflect.TypeOf((*MockStore)(nil).FindOrCreateRelationship), ctx, input)
}

// GetEdge mocks base method.
func (m *MockStore) GetEdge(ctx context.Context, id string) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEdge", ctx, id)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEdge indicates an expected call of GetEdge.
func (mr *MockStoreMockRecorder) GetEdge(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEdge", reflect.TypeOf((*MockStore)(nil).GetEdge), ctx, id)
}

// GetEntityDetails mocks base method.
func (m *MockStore) GetEntityDetails(ctx context.Context, labels []string, identifyingProperties map[string]interface{}) (graph.EntityDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityDetails", ctx, labels, identifyingProperties)
	ret0, _ := ret[0].(graph.EntityDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityDetails indicates an expected call of GetEntityDetails.
func (mr *MockStoreMockRecorder) GetEntityDetails(ctx, labels, identifyingProperties interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityDetails", reflect.TypeOf((*MockStore)(nil).GetEntityDetails), ctx, labels, identifyingProperties)
}

// GetEntitySubgraph mocks base method.
func (m *MockStore) GetEntitySubgraph(ctx context.Context, labels []string, identifyingProperties map[string]interface{}, maxDepth int) (graph.SubgraphResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntitySubgraph", ctx, labels, identifyingProperties, maxDepth)
	ret0, _ := ret[0].(graph.SubgraphResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntitySubgraph indicates an expected call of GetEntitySubgraph.
func (mr *MockStoreMockRecorder) GetEntitySubgraph(ctx, labels, identifyingProperties, maxDepth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntitySubgraph", reflect.TypeOf((*MockStore)(nil).GetEntitySubgraph), ctx, labels, identifyingProperties, maxDepth)
}

// GetNode mocks base method.
func (m *MockStore) GetNode(ctx context.Context, id string) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNode", ctx, id)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNode indicates an expected call of GetNode.
func (mr *MockStoreMockRecorder) GetNode(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNode", reflect.TypeOf((*MockStore)(nil).GetNode), ctx, id)
}

// Query mocks base method.
func (m *MockStore) Query(ctx context.Context, query string, params map[string]interface{}) ([]map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", ctx, query, params)
	ret0, _ := ret[0].([]map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockStoreMockRecorder) Query(ctx, query, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockStore)(nil).Query), ctx, query, params)
}

// UpdateEdge mocks base method.
func (m *MockStore) UpdateEdge(ctx context.Context, id string, properties map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEdge", ctx, id, properties)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEdge indicates an expected call of UpdateEdge.
func (mr *MockStoreMockRecorder) UpdateEdge(ctx, id, properties interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEdge", reflect.TypeOf((*MockStore)(nil).UpdateEdge), ctx, id, properties)
}

// UpdateNode mocks base method.
func (m *MockStore) UpdateNode(ctx context.Context, id string, properties map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNode", ctx, id, properties)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNode indicates an expected call of UpdateNode.
func (mr *MockStoreMockRecorder) UpdateNode(ctx, id, properties interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNode", reflect.TypeOf((*MockStore)(nil).UpdateNode), ctx, id, properties)
}

// UpsertSchema mocks base method.
func (m *MockStore) UpsertSchema(ctx context.Context, schema string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertSchema", ctx, schema)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertSchema indicates an expected call of UpsertSchema.
func (mr *MockStoreMockRecorder) UpsertSchema(ctx, schema interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertSchema", reflect.TypeOf((*MockStore)(nil).UpsertSchema), ctx, schema)
}
