// Code generated by MockGen. DO NOT EDIT.
// Source: internal/graph/dgraph/dgraph_txn.go

// Package mock_dgraph is a generated GoMock package.
package mock_dgraph

import (
	context "context"
	reflect "reflect"

	api "github.com/dgraph-io/dgo/v2/protos/api"
	gomock "github.com/golang/mock/gomock"
)

// MockDgraphTxn is a mock of DgraphTxn interface.
type MockDgraphTxn struct {
	ctrl     *gomock.Controller
	recorder *MockDgraphTxnMockRecorder
}

// MockDgraphTxnMockRecorder is the mock recorder for MockDgraphTxn.
type MockDgraphTxnMockRecorder struct {
	mock *MockDgraphTxn
}

// NewMockDgraphTxn creates a new mock instance.
func NewMockDgraphTxn(ctrl *gomock.Controller) *MockDgraphTxn {
	mock := &MockDgraphTxn{ctrl: ctrl}
	mock.recorder = &MockDgraphTxnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDgraphTxn) EXPECT() *MockDgraphTxnMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockDgraphTxn) Commit(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockDgraphTxnMockRecorder) Commit(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockDgraphTxn)(nil).Commit), ctx)
}

// Discard mocks base method.
func (m *MockDgraphTxn) Discard(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Discard", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Discard indicates an expected call of Discard.
func (mr *MockDgraphTxnMockRecorder) Discard(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Discard", reflect.TypeOf((*MockDgraphTxn)(nil).Discard), ctx)
}

// Mutate mocks base method.
func (m *MockDgraphTxn) Mutate(ctx context.Context, mu *api.Mutation) (*api.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mutate", ctx, mu)
	ret0, _ := ret[0].(*api.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Mutate indicates an expected call of Mutate.
func (mr *MockDgraphTxnMockRecorder) Mutate(ctx, mu interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mutate", reflect.TypeOf((*MockDgraphTxn)(nil).Mutate), ctx, mu)
}

// Query mocks base method.
func (m *MockDgraphTxn) Query(ctx context.Context, q string) (*api.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", ctx, q)
	ret0, _ := ret[0].(*api.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockDgraphTxnMockRecorder) Query(ctx, q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockDgraphTxn)(nil).Query), ctx, q)
}

// QueryWithVars mocks base method.
func (m *MockDgraphTxn) QueryWithVars(ctx context.Context, q string, vars map[string]string) (*api.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryWithVars", ctx, q, vars)
	ret0, _ := ret[0].(*api.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryWithVars indicates an expected call of QueryWithVars.
func (mr *MockDgraphTxnMockRecorder) QueryWithVars(ctx, q, vars interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryWithVars", reflect.TypeOf((*MockDgraphTxn)(nil).QueryWithVars), ctx, q, vars)
}
